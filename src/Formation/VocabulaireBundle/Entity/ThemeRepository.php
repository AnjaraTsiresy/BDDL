<?php

namespace Formation\VocabulaireBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ThemeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ThemeRepository extends EntityRepository {

    public function findThemeThematiqueByPrototypeAccess($id_prototype_access) {
        $query = $this
                ->createQueryBuilder('t')
                ->select('distinct t.id as id_theme, t.libelleTheme as libelle_theme, s.id as id_societe, s.description as societe,p.id as id_prototype_access')
                ->innerJoin('t.lexiques', 'l')
                ->innerJoin('l.societe', 's')
                ->innerJoin('l.prototypeAccess', 'p')
                ->where('p.id = :id_prototype_access')
                ->setParameter('id_prototype_access', $id_prototype_access)
                ->getQuery();

        return $query->getResult();
    }

    public function findAllTheme() {
        $query = $this
                ->createQueryBuilder('t')
                ->select('t.id as id_theme, t.libelleTheme as libelle_theme')
                ->groupBy('t.id')
                ->orderBy('t.libelleTheme', 'asc')
                ->getQuery();

        return $query->getResult();
    }

    public function findAllLE($nom_prototype, $id_theme, $id_societe) {
        $nom_prototype = strtolower($nom_prototype);
        $nom_prototype = trim($nom_prototype);
        if ($id_theme == "" && $id_societe != "") {
            $query = $this
                    ->createQueryBuilder('t')
                    ->select('t.libelleTheme as libelle_theme, t.id as id_theme, s.id as id_societe, s.description as description')
                    ->innerJoin('t.lexiques', 'l')
                    ->innerJoin('l.societe', 's')
                    ->where('s.id = :id_societe AND s.id != 653')
                    ->setParameter('id_societe', $id_societe)
                    ->groupBy('t.id')
                    ->getQuery();
        }


        if ($id_theme != "" && $id_societe == "") {
            $query = $this
                    ->createQueryBuilder('t')
                    ->select('t.libelleTheme as libelle_theme, t.id as id_theme, s.id as id_societe, s.description as description')
                    ->innerJoin('t.lexiques', 'l')
                    ->innerJoin('l.societe', 's')
                    ->where('t.id = :id_theme AND s.id != 653')
                    ->setParameter('id_theme', $id_theme)
                    ->groupBy('t.id')
                    ->getQuery();
        }


        return $query->getResult();
    }

}
