<?php

namespace Formation\VocabulaireBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * VocabulairePrototypeAccessRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VocabulairePrototypeAccessRepository extends EntityRepository
{

    public function getTermesAssocies($id_prototype_access)
    {
        $query = $this
            ->createQueryBuilder('vpa')
            ->select('COUNT(vpa.id) AS nb_termes')
            ->innerJoin('vpa.prototypeAccess', 'pa')
            ->where('pa.id = :id_prototype_access')
            ->setParameter('id_prototype_access', $id_prototype_access)
            ->setMaxResults(1)
            ->getQuery();

        return $query->getSingleResult();
    }


    public function getLEGenAssocies( $id_prototype_access){
        $sql = "SELECT * FROM lexique WHERE id_prototype_access = '$id_prototype_access' AND id_societe = '653' ";
        $nb_lexiques = count( $this->fetch($sql));
        return $nb_lexiques;
    }

    public function getLESocAssocies( $id_societe, $id_prototype_access){
        $sql = "SELECT * FROM lexique WHERE id_prototype_access = '$id_prototype_access' AND id_societe = '$id_societe' ";
        $nb_lexiques = count( $this->fetch($sql));
        return $nb_lexiques;
    }

    public function getVocabulairePrototypeAccessByPrototypeAndVocabulaire($id_prototype_access, $id_vocabulaire)
    {
        $query = $this
            ->createQueryBuilder('vpa')
            ->select('vpa')
            ->innerJoin('vpa.prototypeAccess', 'pa')
            ->innerJoin('vpa.vocabulaire', 'v')
            ->where('pa.id = :id_prototype_access AND v.id = :id_vocabulaire')
            ->setParameter('id_prototype_access', $id_prototype_access)
            ->setParameter('id_vocabulaire', $id_vocabulaire)
            ->getQuery();

        return $query->getResult();
    }

    public function getVocabulairePrototypeAccessByPrototypeAndSocieteAndTheme($id_prototype_access, $id_societe, $id_theme, $dic)
    {

        if ($dic == "fr1"){
            $query = $this
                ->createQueryBuilder('vpa')
                ->select('v.langueOrigine as langue_origine, v.langueTraduction as langue_traduction, v.id as id_vocabulaire')
                ->innerJoin('vpa.prototypeAccess', 'pa')
                ->innerJoin('vpa.vocabulaire', 'v')
                ->innerJoin('v.vocabulaireSocietes','vs')
                ->innerJoin('vs.societe','s')
                ->innerJoin('v.vocabulaireThemes','vt')
                ->innerJoin('vt.theme','t')
                ->where('pa.id = :id_prototype_access AND s.id = :id_societe AND t.id = :id_theme')
                ->orderBy('v.langueOrigine','asc')
                ->setParameter('id_prototype_access', $id_prototype_access)
                ->setParameter('id_societe', $id_societe)
                ->setParameter('id_theme', $id_theme)
                ->getQuery();
        }
        else if ($dic == "en1"){
            $query = $this
                ->createQueryBuilder('vpa')
                ->select('v.langueOrigine as langue_origine, v.langueTraduction as langue_traduction, v.id as id_vocabulaire')
                ->innerJoin('vpa.prototypeAccess', 'pa')
                ->innerJoin('vpa.vocabulaire', 'v')
                ->innerJoin('v.vocabulaireSocietes','vs')
                ->innerJoin('vs.societe','s')
                ->innerJoin('v.vocabulaireThemes','vt')
                ->innerJoin('vt.theme','t')
                ->where('pa.id = :id_prototype_access AND s.id = :id_societe AND t.id = :id_theme')
                ->orderBy('v.langueTraduction','asc')
                ->setParameter('id_prototype_access', $id_prototype_access)
                ->setParameter('id_societe', $id_societe)
                ->setParameter('id_theme', $id_theme)
                ->getQuery();
        }
        else if ($dic == "en2"){
            $query = $this
                ->createQueryBuilder('vpa')
                ->select('v.langueOrigine as langue_origine, v.langueTraduction as langue_traduction, v.id as id_vocabulaire')
                ->innerJoin('vpa.prototypeAccess', 'pa')
                ->innerJoin('vpa.vocabulaire', 'v')
                ->innerJoin('v.vocabulaireSocietes','vs')
                ->innerJoin('vs.societe','s')
                ->innerJoin('v.vocabulaireThemes','vt')
                ->innerJoin('vt.theme','t')
                ->where('pa.id = :id_prototype_access AND s.id = :id_societe AND t.id = :id_theme')
                ->orderBy('v.langueTraduction','desc')
                ->setParameter('id_prototype_access', $id_prototype_access)
                ->setParameter('id_societe', $id_societe)
                ->setParameter('id_theme', $id_theme)
                ->getQuery();
        }
        else if ($dic == "fr2"){
            $query = $this
                ->createQueryBuilder('vpa')
                ->select('v.langueOrigine as langue_origine, v.langueTraduction as langue_traduction, v.id as id_vocabulaire')
                ->innerJoin('vpa.prototypeAccess', 'pa')
                ->innerJoin('vpa.vocabulaire', 'v')
                ->innerJoin('v.vocabulaireSocietes','vs')
                ->innerJoin('vs.societe','s')
                ->innerJoin('v.vocabulaireThemes','vt')
                ->innerJoin('vt.theme','t')
                ->where('pa.id = :id_prototype_access AND s.id = :id_societe AND t.id = :id_theme')
                ->orderBy('v.langueOrigine','desc')
                ->setParameter('id_prototype_access', $id_prototype_access)
                ->setParameter('id_societe', $id_societe)
                ->setParameter('id_theme', $id_theme)
                ->getQuery();
        }
        else {
            $query = $this
                ->createQueryBuilder('vpa')
                ->select('v.langueOrigine as langue_origine, v.langueTraduction as langue_traduction, v.id as id_vocabulaire')
                ->innerJoin('vpa.prototypeAccess', 'pa')
                ->innerJoin('vpa.vocabulaire', 'v')
                ->innerJoin('v.vocabulaireSocietes','vs')
                ->innerJoin('vs.societe','s')
                ->innerJoin('v.vocabulaireThemes','vt')
                ->innerJoin('vt.theme','t')
                ->where('pa.id = :id_prototype_access AND s.id = :id_societe AND t.id = :id_theme')
                ->setParameter('id_prototype_access', $id_prototype_access)
                ->setParameter('id_societe', $id_societe)
                ->setParameter('id_theme', $id_theme)
                ->getQuery();
        }
        return $query->getResult();
    }

    public function LoadDtaWithTheme ($id, $id_theme)
    {

            $query = $this
                ->createQueryBuilder('vpa')
                ->select('distinct v.langueOrigine as langue_origine,
                 v.langueTraduction as langue_traduction,
                 v.id as id_vocabulaire, 
                 v.langueOrigineSansModif as langue_origine_sans_modif')
                ->innerJoin('vpa.prototypeAccess', 'pa')
                ->innerJoin('vpa.vocabulaire', 'v')
                ->innerJoin('v.vocabulaireThemes','vt')
                ->innerJoin('vt.theme','t')
                ->where('pa.id = :id_prototype_access AND t.id = :id_theme')
                ->orderBy('v.langueOrigine','asc')
                ->setParameter('id_prototype_access', $id)
                ->setParameter('id_theme', $id_theme)
                ->getQuery();

        return $query->getResult();
    }


    private function fetch($query)
    {
        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        return  $stmt->fetchAll();
    }

    public function getDataWithThemes($id, $id_theme)
    {
        $query = "SELECT distinct vocabulaire.langue_origine as langue_origine, vocabulaire.langue_traduction as langue_traduction,
		vocabulaire.langue_origine_sans_modif as langue_origine_sans_modif, vocabulaire.nbreLigneLo as nbreLigneLo, vocabulaire.nbreCaractLo as nbreCaractLo FROM vocabulaire_prototype_access
		INNER JOIN vocabulaire ON vocabulaire_prototype_access.id_vocabulaire = vocabulaire.id_vocabulaire
		INNER JOIN vocabulaire_theme ON vocabulaire_theme.id_vocabulaire = vocabulaire.id_vocabulaire and vocabulaire_theme.id_theme = $id_theme
		INNER JOIN theme ON theme.id_theme = $id_theme
		WHERE vocabulaire_prototype_access.id_prototype_access=$id  order by langue_origine collate utf8_general_ci";

        return  $this->fetch($query);
    }

    public function bigSelect()
    {
        $query = "set sql_big_selects=1";
        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
    }


    public function getContenuLE($id, $id_societe, $id_theme){
        $sql = "SELECT vocabulaire.langue_origine, vocabulaire.langue_traduction, vocabulaire.id_vocabulaire
			FROM vocabulaire_prototype_access
			INNER JOIN vocabulaire ON vocabulaire_prototype_access.id_vocabulaire = vocabulaire.id_vocabulaire
			INNER JOIN vocabulaire_theme ON vocabulaire_theme.id_vocabulaire = vocabulaire.id_vocabulaire AND vocabulaire_theme.id_theme = '$id_theme'
			INNER JOIN theme ON theme.id_theme = '$id_theme'
			INNER JOIN vocabulaire_societe ON vocabulaire_societe.id_vocabulaire = vocabulaire.id_vocabulaire AND vocabulaire_societe.id_societe = '$id_societe'
			INNER JOIN societe ON societe.id_societe = '$id_societe'
			WHERE vocabulaire_prototype_access.id_prototype_access=$id";
        
        return $this->fetch($sql);
    }

    public function getVocabulaireProtoByProtoAccessAndVocabulaire($id, $id_vocabulaire)
    {
         $sql ="select * from vocabulaire_prototype_access where id_prototype_access='$id' and id_vocabulaire='$id_vocabulaire' ";
        return $this->fetch($sql);
    }

    public function getVocabulaireProtoByProtoAccessAndVocabulaire2($id)
    {
        $query = $this
            ->createQueryBuilder('vpa')
            ->select('vpa')
            ->innerJoin('vpa.vocabulaire', 'v')
            ->where('v.id = :id_vocabulaire')
            ->setParameter('id_vocabulaire', $id)
            ->getQuery();

        return $query->getResult();
    }

    public function getVocabulaireProtoByProtoAccessAndVocabulaire3($id,$id_vocabulaire)
    {
        $query = $this
            ->createQueryBuilder('vpa')
            ->select('vpa')
            ->innerJoin('vpa.prototypeAccess', 'pa')
            ->innerJoin('vpa.vocabulaire', 'v')
            ->where('v.id = :id_vocabulaire AND pa.id = :id_prototype_access')
           ->setParameter('id_prototype_access', $id)
            ->setParameter('id_vocabulaire', $id_vocabulaire)
            ->getQuery();

        return $query->getResult();
    }

}
